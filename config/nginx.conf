user nginx;
worker_processes 8;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error_log info;
pid /var/run/nginx.pid;

events {
  worker_connections 10240;
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  client_max_body_size 50M;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

  # click tracking!
  access_log /var/log/nginx/access_log combined;

  # you generally want to serve static files with nginx since neither
  # Unicorn nor Rainbows! is optimized for it at the moment
  # copies data between one FD and other from within the kernel faster then read() + write()
  sendfile on;
  # send headers in one peace, its better then sending them one by one
  tcp_nopush on;
  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;
  # server will close connection after this time
  keepalive_timeout 30;

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx. It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_vary on;
  gzip_min_length 500;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json;

  include /etc/nginx/sites-enabled/sync-http.conf;
  include /etc/nginx/sites-enabled/gitlab-http.conf;
}
