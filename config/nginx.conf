worker_processes 1;

error_log /var/log/nginx/error_log info;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
  accept_mutex off; # "on" if nginx worker_processes > 1
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  # click tracking!
  access_log /var/log/nginx/access_log combined;

  # you generally want to serve static files with nginx since neither
  # Unicorn nor Rainbows! is optimized for it at the moment
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 5;

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx. It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_vary on;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/html text/css text/javascript;

  # this can be any application server, not just Unicorn/Rainbows!
  upstream unicorn_server {
    # for UNIX domain socket setups (change the path accordingly):
    server unix:/Users/ashrith/Development/sinatra_delayedjob_mongoid/tmp/sockets/unicorn.sock fail_timeout=0;
  }

  server {
    server_name localhost;
    listen 80;
    # path for static files (change the path)
    root /Users/ashrith/Development/sinatra_delayedjob_mongoid/public;

    location / {
      try_files $uri @app;
    }

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      # If you don't find the filename in the static files
      # Then request it from the unicorn server
      if (!-f $request_filename) {
        proxy_pass http://unicorn_server;
        break;
      }
    }
  }
}
